
Bootloader_conf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002238  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002370  08002370  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002370  08002370  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002370  08002370  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002370  08002370  00012370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002374  08002374  00012374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000030  080023a4  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080023a4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082e0  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d3d  00000000  00000000  00028335  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  0002a078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  0002a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e41  00000000  00000000  0002b020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000864e  00000000  00000000  00042e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008322e  00000000  00000000  0004b4af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce6dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f00  00000000  00000000  000ce758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	0800232c 	.word	0x0800232c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	0800232c 	.word	0x0800232c

0800014c <BL_FeatchHostCommand>:

/**
 * @breif : this function Fetch the selected command from the Host
 */
BL_Status BL_FeatchHostCommand()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	BL_Status status =BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_status= HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]
	uint8_t DataLenght=0;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]
	memset(BL_HostBuff,0,BL_HOST_RX_BUFFER_LENGTH);
 800015e:	2264      	movs	r2, #100	; 0x64
 8000160:	2100      	movs	r1, #0
 8000162:	481e      	ldr	r0, [pc, #120]	; (80001dc <BL_FeatchHostCommand+0x90>)
 8000164:	f002 f8da 	bl	800231c <memset>
	/*Receive the length of the packet from the host*/
	HAL_status = HAL_UART_Receive(BL_SEND_CMD_UART, BL_HostBuff, 1, HAL_MAX_DELAY);
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	2201      	movs	r2, #1
 800016e:	491b      	ldr	r1, [pc, #108]	; (80001dc <BL_FeatchHostCommand+0x90>)
 8000170:	481b      	ldr	r0, [pc, #108]	; (80001e0 <BL_FeatchHostCommand+0x94>)
 8000172:	f001 ff34 	bl	8001fde <HAL_UART_Receive>
 8000176:	4603      	mov	r3, r0
 8000178:	71bb      	strb	r3, [r7, #6]
	if(HAL_OK != HAL_status)
 800017a:	79bb      	ldrb	r3, [r7, #6]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <BL_FeatchHostCommand+0x3a>
	{
		status =BL_NACK;
 8000180:	2300      	movs	r3, #0
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e025      	b.n	80001d2 <BL_FeatchHostCommand+0x86>
	}
	else
	{
		DataLenght = BL_HostBuff[0]-4;
 8000186:	4b15      	ldr	r3, [pc, #84]	; (80001dc <BL_FeatchHostCommand+0x90>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	3b04      	subs	r3, #4
 800018c:	717b      	strb	r3, [r7, #5]
		/*Receive the whole packet from the Host*/
		HAL_status = HAL_UART_Receive(BL_SEND_CMD_UART, &BL_HostBuff[1], DataLenght, HAL_MAX_DELAY);
 800018e:	797b      	ldrb	r3, [r7, #5]
 8000190:	b29a      	uxth	r2, r3
 8000192:	f04f 33ff 	mov.w	r3, #4294967295
 8000196:	4913      	ldr	r1, [pc, #76]	; (80001e4 <BL_FeatchHostCommand+0x98>)
 8000198:	4811      	ldr	r0, [pc, #68]	; (80001e0 <BL_FeatchHostCommand+0x94>)
 800019a:	f001 ff20 	bl	8001fde <HAL_UART_Receive>
 800019e:	4603      	mov	r3, r0
 80001a0:	71bb      	strb	r3, [r7, #6]
		DataLenght++;
 80001a2:	797b      	ldrb	r3, [r7, #5]
 80001a4:	3301      	adds	r3, #1
 80001a6:	717b      	strb	r3, [r7, #5]

		if(HAL_OK != HAL_status)
 80001a8:	79bb      	ldrb	r3, [r7, #6]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d002      	beq.n	80001b4 <BL_FeatchHostCommand+0x68>
		{
			status =BL_NACK;
 80001ae:	2300      	movs	r3, #0
 80001b0:	71fb      	strb	r3, [r7, #7]
 80001b2:	e00e      	b.n	80001d2 <BL_FeatchHostCommand+0x86>
		}
		else
		{
			switch(BL_HostBuff[1])
 80001b4:	4b09      	ldr	r3, [pc, #36]	; (80001dc <BL_FeatchHostCommand+0x90>)
 80001b6:	785b      	ldrb	r3, [r3, #1]
 80001b8:	2b15      	cmp	r3, #21
 80001ba:	d002      	beq.n	80001c2 <BL_FeatchHostCommand+0x76>
 80001bc:	2b16      	cmp	r3, #22
 80001be:	d004      	beq.n	80001ca <BL_FeatchHostCommand+0x7e>
 80001c0:	e007      	b.n	80001d2 <BL_FeatchHostCommand+0x86>
			{

			case CBL_FLASH_ERASE_CMD:
				Bootloader_Erase_Flash(BL_HostBuff);
 80001c2:	4806      	ldr	r0, [pc, #24]	; (80001dc <BL_FeatchHostCommand+0x90>)
 80001c4:	f000 f810 	bl	80001e8 <Bootloader_Erase_Flash>
				break;
 80001c8:	e003      	b.n	80001d2 <BL_FeatchHostCommand+0x86>
			case CBL_MEM_WRITE_CMD:
				Bootloader_Memory_Write(BL_HostBuff);
 80001ca:	4804      	ldr	r0, [pc, #16]	; (80001dc <BL_FeatchHostCommand+0x90>)
 80001cc:	f000 f852 	bl	8000274 <Bootloader_Memory_Write>

				break;
 80001d0:	bf00      	nop
			}
		}


	}
	return status;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	20000114 	.word	0x20000114
 80001e4:	20000065 	.word	0x20000065

080001e8 <Bootloader_Erase_Flash>:
	va_end(args);

}

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_length = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	613b      	str	r3, [r7, #16]
	uint8_t eraseStatus=SUCCESSFUL_ERASE;
 80001f8:	2303      	movs	r3, #3
 80001fa:	73fb      	strb	r3, [r7, #15]
	Host_CMD_Packet_length = Host_Buffer[0] + 1;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	b29b      	uxth	r3, r3
 8000202:	3301      	adds	r3, #1
 8000204:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t*) ((Host_Buffer + Host_CMD_Packet_length) - 4));
 8000206:	8afb      	ldrh	r3, [r7, #22]
 8000208:	3b04      	subs	r3, #4
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	613b      	str	r3, [r7, #16]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMessage("Mass erase or sector erase user flash ");
#endif
	if (CRC_VERIFICATION_PASSED
			== Bootloader_CRC_Verify((uint8_t*) &Host_Buffer[0],
					Host_CMD_Packet_length - 4, Host_CRC32)) {
 8000212:	8afb      	ldrh	r3, [r7, #22]
 8000214:	3b04      	subs	r3, #4
			== Bootloader_CRC_Verify((uint8_t*) &Host_Buffer[0],
 8000216:	693a      	ldr	r2, [r7, #16]
 8000218:	4619      	mov	r1, r3
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f8a6 	bl	800036c <Bootloader_CRC_Verify>
 8000220:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED
 8000222:	2b01      	cmp	r3, #1
 8000224:	d120      	bne.n	8000268 <Bootloader_Erase_Flash+0x80>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMessage("CRC calculation passed");
#endif
		Bootloader_Send_ACK(1);
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f8dc 	bl	80003e4 <Bootloader_Send_ACK>
		eraseStatus = Perform_Flash_Erase(Host_Buffer[2],Host_Buffer[3]);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3302      	adds	r3, #2
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	461a      	mov	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3303      	adds	r3, #3
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	4619      	mov	r1, r3
 800023c:	4610      	mov	r0, r2
 800023e:	f000 f939 	bl	80004b4 <Perform_Flash_Erase>
 8000242:	4603      	mov	r3, r0
 8000244:	73fb      	strb	r3, [r7, #15]
		if(eraseStatus == SUCCESSFUL_ERASE)
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	2b03      	cmp	r3, #3
 800024a:	d106      	bne.n	800025a <Bootloader_Erase_Flash+0x72>
		{
			Bootloader_Send_Data_To_Host((uint8_t*)&eraseStatus, 1);
 800024c:	f107 030f 	add.w	r3, r7, #15
 8000250:	2101      	movs	r1, #1
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f8f2 	bl	800043c <Bootloader_Send_Data_To_Host>
		Bootloader_Send_NACK();
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMessage("CRC calculation failed");
#endif
	}
}
 8000258:	e008      	b.n	800026c <Bootloader_Erase_Flash+0x84>
			Bootloader_Send_Data_To_Host((uint8_t*)&eraseStatus, 1);
 800025a:	f107 030f 	add.w	r3, r7, #15
 800025e:	2101      	movs	r1, #1
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f8eb 	bl	800043c <Bootloader_Send_Data_To_Host>
}
 8000266:	e001      	b.n	800026c <Bootloader_Erase_Flash+0x84>
		Bootloader_Send_NACK();
 8000268:	f000 f8d6 	bl	8000418 <Bootloader_Send_NACK>
}
 800026c:	bf00      	nop
 800026e:	3718      	adds	r7, #24
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <Bootloader_Memory_Write>:
uint16_t i=0;
static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]

	uint16_t Host_CMD_Packet_length = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	613b      	str	r3, [r7, #16]
	static uint32_t HostAddress=0;
	uint32_t PayloadLen=0;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
	uint8_t Address_Verification=ADDRESS_IS_INVALID;
 8000288:	2300      	movs	r3, #0
 800028a:	72fb      	strb	r3, [r7, #11]
	uint8_t Flash_payload_status=FLASH_PAYLOAD_WRITE_FAILED;
 800028c:	2300      	movs	r3, #0
 800028e:	72bb      	strb	r3, [r7, #10]
	Host_CMD_Packet_length = Host_Buffer[0] + 1;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b29b      	uxth	r3, r3
 8000296:	3301      	adds	r3, #1
 8000298:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t*) ((Host_Buffer + Host_CMD_Packet_length) - 4));
 800029a:	8afb      	ldrh	r3, [r7, #22]
 800029c:	3b04      	subs	r3, #4
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	4413      	add	r3, r2
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	613b      	str	r3, [r7, #16]
					Host_CMD_Packet_length - 4, Host_CRC32)) {*/
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMessage("CRC calculation passed");
#endif
		//Bootloader_Send_ACK(1);
		HostAddress = *((uint32_t*)&Host_Buffer[2]) + 64*i;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3302      	adds	r3, #2
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1f      	ldr	r2, [pc, #124]	; (800032c <Bootloader_Memory_Write+0xb8>)
 80002ae:	8812      	ldrh	r2, [r2, #0]
 80002b0:	0192      	lsls	r2, r2, #6
 80002b2:	4413      	add	r3, r2
 80002b4:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <Bootloader_Memory_Write+0xbc>)
 80002b6:	6013      	str	r3, [r2, #0]
		i++;
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <Bootloader_Memory_Write+0xb8>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	b29a      	uxth	r2, r3
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <Bootloader_Memory_Write+0xb8>)
 80002c2:	801a      	strh	r2, [r3, #0]
		PayloadLen=Host_Buffer[6];
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3306      	adds	r3, #6
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	60fb      	str	r3, [r7, #12]
		Address_Verification = Host_Address_Verification(HostAddress);
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <Bootloader_Memory_Write+0xbc>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f8c7 	bl	8000464 <Host_Address_Verification>
 80002d6:	4603      	mov	r3, r0
 80002d8:	72fb      	strb	r3, [r7, #11]
		if(ADDRESS_IS_VALID == Address_Verification)
 80002da:	7afb      	ldrb	r3, [r7, #11]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d11a      	bne.n	8000316 <Bootloader_Memory_Write+0xa2>
		{
			Flash_payload_status = FlashMemory_Payload_Write((uint16_t*)&Host_Buffer[7],HostAddress,PayloadLen);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	1dd8      	adds	r0, r3, #7
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <Bootloader_Memory_Write+0xbc>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	4619      	mov	r1, r3
 80002ec:	f000 f930 	bl	8000550 <FlashMemory_Payload_Write>
 80002f0:	4603      	mov	r3, r0
 80002f2:	72bb      	strb	r3, [r7, #10]

			if(Flash_payload_status == FLASH_PAYLOAD_WRITE_PASSED)
 80002f4:	7abb      	ldrb	r3, [r7, #10]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d106      	bne.n	8000308 <Bootloader_Memory_Write+0x94>
			{
				Bootloader_Send_Data_To_Host((uint8_t*)&Flash_payload_status, 1);
 80002fa:	f107 030a 	add.w	r3, r7, #10
 80002fe:	2101      	movs	r1, #1
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f89b 	bl	800043c <Bootloader_Send_Data_To_Host>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMessage("CRC calculation failed");
#endif
	}*/

}
 8000306:	e00c      	b.n	8000322 <Bootloader_Memory_Write+0xae>
				Bootloader_Send_Data_To_Host((uint8_t*)&Flash_payload_status, 1);
 8000308:	f107 030a 	add.w	r3, r7, #10
 800030c:	2101      	movs	r1, #1
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f894 	bl	800043c <Bootloader_Send_Data_To_Host>
}
 8000314:	e005      	b.n	8000322 <Bootloader_Memory_Write+0xae>
			Bootloader_Send_Data_To_Host((uint8_t*)&Address_Verification, 1);
 8000316:	f107 030b 	add.w	r3, r7, #11
 800031a:	2101      	movs	r1, #1
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f88d 	bl	800043c <Bootloader_Send_Data_To_Host>
}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000004c 	.word	0x2000004c
 8000330:	20000050 	.word	0x20000050

08000334 <Bootloader_Jump_To_Application>:

/**
 * @breif : this function that jump to the application
 */
 void Bootloader_Jump_To_Application()
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_SECTOR2_BASE_ADDRESS);
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <Bootloader_Jump_To_Application+0x30>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	60fb      	str	r3, [r7, #12]
	uint32_t MainAppAdd = *((volatile uint32_t*)(FLASH_SECTOR2_BASE_ADDRESS+4));
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <Bootloader_Jump_To_Application+0x34>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	60bb      	str	r3, [r7, #8]

	pMainApp ResetHandler_Address=(pMainApp)MainAppAdd;
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	607b      	str	r3, [r7, #4]
	HAL_RCC_DeInit();
 800034a:	f001 f8b3 	bl	80014b4 <HAL_RCC_DeInit>
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	f383 8808 	msr	MSP, r3
	__set_MSP(MSP_Value);
	ResetHandler_Address();
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4798      	blx	r3
}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	08008000 	.word	0x08008000
 8000368:	08008004 	.word	0x08008004

0800036c <Bootloader_CRC_Verify>:
 * 			Host_CRC -> the CRC value calculated by the Host
 * return : CRC_VERIFICATION_FAILED if the data corrupted
 * 			CRC_VERIFICATION_PASS if the data received success
 */
static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
	uint8_t crc_status=CRC_VERIFICATION_FAILED;
 8000378:	2300      	movs	r3, #0
 800037a:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_crc_calculated=0;
 800037c:	2300      	movs	r3, #0
 800037e:	61bb      	str	r3, [r7, #24]
	uint32_t DataBuffer=0;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
	for(uint8_t count=0;count<Data_Len;count++)
 8000384:	2300      	movs	r3, #0
 8000386:	75fb      	strb	r3, [r7, #23]
 8000388:	e00f      	b.n	80003aa <Bootloader_CRC_Verify+0x3e>
	{
		DataBuffer=(uint32_t)pData[count];
 800038a:	7dfb      	ldrb	r3, [r7, #23]
 800038c:	68fa      	ldr	r2, [r7, #12]
 800038e:	4413      	add	r3, r2
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	613b      	str	r3, [r7, #16]
		MCU_crc_calculated = HAL_CRC_Accumulate(&hcrc, &DataBuffer, 1);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	2201      	movs	r2, #1
 800039a:	4619      	mov	r1, r3
 800039c:	4810      	ldr	r0, [pc, #64]	; (80003e0 <Bootloader_CRC_Verify+0x74>)
 800039e:	f000 fd04 	bl	8000daa <HAL_CRC_Accumulate>
 80003a2:	61b8      	str	r0, [r7, #24]
	for(uint8_t count=0;count<Data_Len;count++)
 80003a4:	7dfb      	ldrb	r3, [r7, #23]
 80003a6:	3301      	adds	r3, #1
 80003a8:	75fb      	strb	r3, [r7, #23]
 80003aa:	7dfb      	ldrb	r3, [r7, #23]
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d8eb      	bhi.n	800038a <Bootloader_CRC_Verify+0x1e>

	}
	__HAL_CRC_DR_RESET(&hcrc);
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <Bootloader_CRC_Verify+0x74>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <Bootloader_CRC_Verify+0x74>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f042 0201 	orr.w	r2, r2, #1
 80003c0:	609a      	str	r2, [r3, #8]
	if(Host_CRC== MCU_crc_calculated)
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	69bb      	ldr	r3, [r7, #24]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d102      	bne.n	80003d0 <Bootloader_CRC_Verify+0x64>
	{
		crc_status=CRC_VERIFICATION_PASSED;
 80003ca:	2301      	movs	r3, #1
 80003cc:	77fb      	strb	r3, [r7, #31]
 80003ce:	e001      	b.n	80003d4 <Bootloader_CRC_Verify+0x68>
	}
	else
	{
		crc_status=CRC_VERIFICATION_FAILED;
 80003d0:	2300      	movs	r3, #0
 80003d2:	77fb      	strb	r3, [r7, #31]
	}

	return crc_status;
 80003d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200000c8 	.word	0x200000c8

080003e4 <Bootloader_Send_ACK>:
/**
 * @breif : this function send Not acknowledge to Bootloader
 *
 */
static void Bootloader_Send_ACK(uint8_t Replay_Len)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	uint8_t ACK_valu[2]={0};
 80003ee:	2300      	movs	r3, #0
 80003f0:	81bb      	strh	r3, [r7, #12]
	ACK_valu[0] = CBL_SEND_ACK;
 80003f2:	23cd      	movs	r3, #205	; 0xcd
 80003f4:	733b      	strb	r3, [r7, #12]
	ACK_valu[1] = Replay_Len;
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_DEBUG_UART, (uint8_t *)ACK_valu, 2, HAL_MAX_DELAY);
 80003fa:	f107 010c 	add.w	r1, r7, #12
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000402:	2202      	movs	r2, #2
 8000404:	4803      	ldr	r0, [pc, #12]	; (8000414 <Bootloader_Send_ACK+0x30>)
 8000406:	f001 fd58 	bl	8001eba <HAL_UART_Transmit>
}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000114 	.word	0x20000114

08000418 <Bootloader_Send_NACK>:
/**
 * @breif : this function send acknowledge to Bootloader
 *
 */
static void Bootloader_Send_NACK(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
	uint8_t  ACK_valu = CBL_SEND_NACK;
 800041e:	23ab      	movs	r3, #171	; 0xab
 8000420:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_DEBUG_UART,&ACK_valu,sizeof( ACK_valu),HAL_MAX_DELAY );
 8000422:	1df9      	adds	r1, r7, #7
 8000424:	f04f 33ff 	mov.w	r3, #4294967295
 8000428:	2201      	movs	r2, #1
 800042a:	4803      	ldr	r0, [pc, #12]	; (8000438 <Bootloader_Send_NACK+0x20>)
 800042c:	f001 fd45 	bl	8001eba <HAL_UART_Transmit>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000114 	.word	0x20000114

0800043c <Bootloader_Send_Data_To_Host>:
void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_DEBUG_UART,Host_Buffer,Data_Len,HAL_MAX_DELAY );
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	b29a      	uxth	r2, r3
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <Bootloader_Send_Data_To_Host+0x24>)
 8000452:	f001 fd32 	bl	8001eba <HAL_UART_Transmit>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000114 	.word	0x20000114

08000464 <Host_Address_Verification>:
 * param  : Address the address needed to verify
 * return : ADDRESS_IS_INVALID if the address is invalid
 * 			ADDRESS_IS_VALID   if the address is valid
 */
static uint8_t Host_Address_Verification(uint32_t Address)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 800046c:	2300      	movs	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]
	if(Address >= SRAM_BASE && Address <= STM32F103_SRAM_END)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000476:	d306      	bcc.n	8000486 <Host_Address_Verification+0x22>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <Host_Address_Verification+0x48>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d802      	bhi.n	8000486 <Host_Address_Verification+0x22>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000480:	2301      	movs	r3, #1
 8000482:	73fb      	strb	r3, [r7, #15]
 8000484:	e00c      	b.n	80004a0 <Host_Address_Verification+0x3c>
	}
	else if(Address >= FLASH_BASE && Address <= STM32F103_FLASH_END)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800048c:	d306      	bcc.n	800049c <Host_Address_Verification+0x38>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <Host_Address_Verification+0x4c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d802      	bhi.n	800049c <Host_Address_Verification+0x38>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000496:	2301      	movs	r3, #1
 8000498:	73fb      	strb	r3, [r7, #15]
 800049a:	e001      	b.n	80004a0 <Host_Address_Verification+0x3c>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 800049c:	2300      	movs	r3, #0
 800049e:	73fb      	strb	r3, [r7, #15]
	}

	return Address_Verification;
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	20005000 	.word	0x20005000
 80004b0:	08010000 	.word	0x08010000

080004b4 <Perform_Flash_Erase>:
 * 			 VALID_PAGE_NUMBER  if the page is valid
 * 			 UNSUCCESSFUL_ERASE if unsuccessful erase
 * 			 SUCCESSFUL_ERASE	if successful erase
 */
uint8_t Perform_Flash_Erase(uint32_t PageAddress, uint8_t page_Number)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]
	FLASH_EraseInitTypeDef pEraseInit; /*Struct has the the initialize data */
	uint8_t PageStatus = INVALID_PAGE_NUMBER;
 80004c0:	2300      	movs	r3, #0
 80004c2:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef eraseStatus=HAL_ERROR;
 80004c4:	2301      	movs	r3, #1
 80004c6:	77bb      	strb	r3, [r7, #30]
	uint32_t PageError=0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
	/*check if the valid page number or not */
	if(page_Number>CBL_FLASH_MAX_PAGE_NUMBER)
 80004cc:	78fb      	ldrb	r3, [r7, #3]
 80004ce:	2b80      	cmp	r3, #128	; 0x80
 80004d0:	d902      	bls.n	80004d8 <Perform_Flash_Erase+0x24>
	{

		PageStatus = INVALID_PAGE_NUMBER;
 80004d2:	2300      	movs	r3, #0
 80004d4:	77fb      	strb	r3, [r7, #31]
 80004d6:	e034      	b.n	8000542 <Perform_Flash_Erase+0x8e>
	}
	else
	{
		PageStatus = VALID_PAGE_NUMBER;
 80004d8:	2301      	movs	r3, #1
 80004da:	77fb      	strb	r3, [r7, #31]
		if(page_Number <= (CBL_FLASH_MAX_PAGE_NUMBER-1) || CBL_FLASH_MASS_ERASE ==PageAddress)
 80004dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	da02      	bge.n	80004ea <Perform_Flash_Erase+0x36>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2bff      	cmp	r3, #255	; 0xff
 80004e8:	d129      	bne.n	800053e <Perform_Flash_Erase+0x8a>
		{
			if(CBL_FLASH_MASS_ERASE ==PageAddress)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d106      	bne.n	80004fe <Perform_Flash_Erase+0x4a>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
				pEraseInit.PageAddress= 0x08008000;
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <Perform_Flash_Erase+0x98>)
 80004f6:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages =  7;
 80004f8:	2307      	movs	r3, #7
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	e005      	b.n	800050a <Perform_Flash_Erase+0x56>
			}
			else
			{

				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
				pEraseInit.PageAddress= PageAddress;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages = page_Number;
 8000506:	78fb      	ldrb	r3, [r7, #3]
 8000508:	61bb      	str	r3, [r7, #24]
			}
			pEraseInit.Banks=FLASH_BANK_1;
 800050a:	2301      	movs	r3, #1
 800050c:	613b      	str	r3, [r7, #16]
			HAL_FLASH_Unlock();
 800050e:	f000 fce7 	bl	8000ee0 <HAL_FLASH_Unlock>
			eraseStatus = HAL_FLASHEx_Erase(&pEraseInit,&PageError);
 8000512:	f107 0208 	add.w	r2, r7, #8
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4611      	mov	r1, r2
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fdc7 	bl	80010b0 <HAL_FLASHEx_Erase>
 8000522:	4603      	mov	r3, r0
 8000524:	77bb      	strb	r3, [r7, #30]
			HAL_FLASH_Lock();
 8000526:	f000 fd01 	bl	8000f2c <HAL_FLASH_Lock>
			if(HAL_SUCCESSFUL_ERASE == PageError)
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d102      	bne.n	8000538 <Perform_Flash_Erase+0x84>
			{
				PageStatus = SUCCESSFUL_ERASE;
 8000532:	2303      	movs	r3, #3
 8000534:	77fb      	strb	r3, [r7, #31]
			if(HAL_SUCCESSFUL_ERASE == PageError)
 8000536:	e004      	b.n	8000542 <Perform_Flash_Erase+0x8e>
			}
			else
			{
				PageStatus = UNSUCCESSFUL_ERASE;
 8000538:	2302      	movs	r3, #2
 800053a:	77fb      	strb	r3, [r7, #31]
			if(HAL_SUCCESSFUL_ERASE == PageError)
 800053c:	e001      	b.n	8000542 <Perform_Flash_Erase+0x8e>
			}
		}
		else
		{
			PageStatus = UNSUCCESSFUL_ERASE;
 800053e:	2302      	movs	r3, #2
 8000540:	77fb      	strb	r3, [r7, #31]
		}
	}

	return PageStatus;
 8000542:	7ffb      	ldrb	r3, [r7, #31]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	08008000 	.word	0x08008000

08000550 <FlashMemory_Payload_Write>:
 * 			payloadLen -> the length of the data needed to write in the flash
 * return :	FLASH_PAYLOAD_WRITE_FAILED if Writing data is fail
 * 			FLASH_PAYLOAD_WRITE_PASS if Writing data seccess
 */
static uint8_t FlashMemory_Payload_Write(uint16_t *Host_Buff, uint32_t Payload_StartAddresss,uint32_t payloadLen)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b089      	sub	sp, #36	; 0x24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef HALstatus = HAL_ERROR;  /*has the status of the HAL functions*/
 800055c:	2301      	movs	r3, #1
 800055e:	77fb      	strb	r3, [r7, #31]
	uint8_t Flash_payload_status=FLASH_PAYLOAD_WRITE_FAILED;
 8000560:	2300      	movs	r3, #0
 8000562:	77bb      	strb	r3, [r7, #30]
	uint16_t Payload_counter=0 ;
 8000564:	2300      	movs	r3, #0
 8000566:	83bb      	strh	r3, [r7, #28]
	uint16_t Payload_count=0 ;
 8000568:	2300      	movs	r3, #0
 800056a:	837b      	strh	r3, [r7, #26]
	uint8_t status=FLASH_PAYLOAD_WRITE_PASSED;
 800056c:	2301      	movs	r3, #1
 800056e:	767b      	strb	r3, [r7, #25]
	uint32_t Address = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
	/*unlock the flash memory to write the code*/
	HAL_FLASH_Unlock();
 8000574:	f000 fcb4 	bl	8000ee0 <HAL_FLASH_Unlock>
	/*Writing the Received binary data (Code) from host */
	for(Payload_counter=0,Payload_count=0 ;Payload_counter<payloadLen/2;Payload_counter+=1,Payload_count+=2)
 8000578:	2300      	movs	r3, #0
 800057a:	83bb      	strh	r3, [r7, #28]
 800057c:	2300      	movs	r3, #0
 800057e:	837b      	strh	r3, [r7, #26]
 8000580:	e021      	b.n	80005c6 <FlashMemory_Payload_Write+0x76>
	{
		/*update the flash address each iltration */
		Address = Payload_StartAddresss+Payload_count;
 8000582:	8b7b      	ldrh	r3, [r7, #26]
 8000584:	68ba      	ldr	r2, [r7, #8]
 8000586:	4413      	add	r3, r2
 8000588:	617b      	str	r3, [r7, #20]
		/*Writing the Date in the flash Halfword by Halfword */
		HALstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Host_Buff[Payload_counter]);
 800058a:	8bbb      	ldrh	r3, [r7, #28]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	b29b      	uxth	r3, r3
 8000596:	f04f 0400 	mov.w	r4, #0
 800059a:	461a      	mov	r2, r3
 800059c:	4623      	mov	r3, r4
 800059e:	6979      	ldr	r1, [r7, #20]
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fc2d 	bl	8000e00 <HAL_FLASH_Program>
 80005a6:	4603      	mov	r3, r0
 80005a8:	77fb      	strb	r3, [r7, #31]

		/*Check status of writing in the flash*/
		if(HALstatus != HAL_OK)
 80005aa:	7ffb      	ldrb	r3, [r7, #31]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <FlashMemory_Payload_Write+0x66>
		{
			Flash_payload_status=FLASH_PAYLOAD_WRITE_FAILED;
 80005b0:	2300      	movs	r3, #0
 80005b2:	77bb      	strb	r3, [r7, #30]
			break;
 80005b4:	e00c      	b.n	80005d0 <FlashMemory_Payload_Write+0x80>

		}
		else
		{
			Flash_payload_status=FLASH_PAYLOAD_WRITE_PASSED;
 80005b6:	2301      	movs	r3, #1
 80005b8:	77bb      	strb	r3, [r7, #30]
	for(Payload_counter=0,Payload_count=0 ;Payload_counter<payloadLen/2;Payload_counter+=1,Payload_count+=2)
 80005ba:	8bbb      	ldrh	r3, [r7, #28]
 80005bc:	3301      	adds	r3, #1
 80005be:	83bb      	strh	r3, [r7, #28]
 80005c0:	8b7b      	ldrh	r3, [r7, #26]
 80005c2:	3302      	adds	r3, #2
 80005c4:	837b      	strh	r3, [r7, #26]
 80005c6:	8bba      	ldrh	r2, [r7, #28]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	085b      	lsrs	r3, r3, #1
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d3d8      	bcc.n	8000582 <FlashMemory_Payload_Write+0x32>
		}
	}

	if(Flash_payload_status==FLASH_PAYLOAD_WRITE_PASSED && HALstatus == HAL_OK)
 80005d0:	7fbb      	ldrb	r3, [r7, #30]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d104      	bne.n	80005e0 <FlashMemory_Payload_Write+0x90>
 80005d6:	7ffb      	ldrb	r3, [r7, #31]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <FlashMemory_Payload_Write+0x90>
	{
		HAL_FLASH_Lock();
 80005dc:	f000 fca6 	bl	8000f2c <HAL_FLASH_Lock>
	}
	/*lock flash after Writing the data (code)*/
	HAL_FLASH_Lock();
 80005e0:	f000 fca4 	bl	8000f2c <HAL_FLASH_Lock>
	return Flash_payload_status;
 80005e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3724      	adds	r7, #36	; 0x24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd90      	pop	{r4, r7, pc}
	...

080005f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_CRC_Init+0x20>)
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <MX_CRC_Init+0x24>)
 80005f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_CRC_Init+0x20>)
 80005fc:	f000 fbb9 	bl	8000d72 <HAL_CRC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000606:	f000 f908 	bl	800081a <Error_Handler>
  }

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000c8 	.word	0x200000c8
 8000614:	40023000 	.word	0x40023000

08000618 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a09      	ldr	r2, [pc, #36]	; (800064c <HAL_CRC_MspInit+0x34>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d10b      	bne.n	8000642 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_CRC_MspInit+0x38>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_CRC_MspInit+0x38>)
 8000630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_CRC_MspInit+0x38>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40023000 	.word	0x40023000
 8000650:	40021000 	.word	0x40021000

08000654 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_GPIO_Init+0x58>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a13      	ldr	r2, [pc, #76]	; (80006ac <MX_GPIO_Init+0x58>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_GPIO_Init+0x58>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_GPIO_Init+0x58>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <MX_GPIO_Init+0x58>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_GPIO_Init+0x58>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_GPIO_Init+0x58>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <MX_GPIO_Init+0x58>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MX_GPIO_Init+0x58>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000

080006b0 <ckeakStart>:
uint8_t check[16]="Bootloader Start";
uint8_t Erase[16]="Bootloader Ereas";
uint8_t start[16]={0};
uint8_t flag=0;
uint8_t ckeakStart()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint8_t count=0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(BL_SEND_CMD_UART, start, sizeof(check), HAL_MAX_DELAY);
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	2210      	movs	r2, #16
 80006c0:	491d      	ldr	r1, [pc, #116]	; (8000738 <ckeakStart+0x88>)
 80006c2:	481e      	ldr	r0, [pc, #120]	; (800073c <ckeakStart+0x8c>)
 80006c4:	f001 fc8b 	bl	8001fde <HAL_UART_Receive>

	while(check[count]!='\0')
 80006c8:	e00a      	b.n	80006e0 <ckeakStart+0x30>
	{
		if(start[count] != check[count])
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4a1a      	ldr	r2, [pc, #104]	; (8000738 <ckeakStart+0x88>)
 80006ce:	5cd2      	ldrb	r2, [r2, r3]
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	491b      	ldr	r1, [pc, #108]	; (8000740 <ckeakStart+0x90>)
 80006d4:	5ccb      	ldrb	r3, [r1, r3]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d108      	bne.n	80006ec <ckeakStart+0x3c>
			break;
		count++;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	3301      	adds	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
	while(check[count]!='\0')
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <ckeakStart+0x90>)
 80006e4:	5cd3      	ldrb	r3, [r2, r3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1ef      	bne.n	80006ca <ckeakStart+0x1a>
 80006ea:	e000      	b.n	80006ee <ckeakStart+0x3e>
			break;
 80006ec:	bf00      	nop
	}
	if(count == 16)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b10      	cmp	r3, #16
 80006f2:	d101      	bne.n	80006f8 <ckeakStart+0x48>
		return 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e01a      	b.n	800072e <ckeakStart+0x7e>

	else{
		count=0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]
		while(Erase[count]!='\0')
 80006fc:	e00a      	b.n	8000714 <ckeakStart+0x64>
		{
			if(start[count] != Erase[count])
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <ckeakStart+0x88>)
 8000702:	5cd2      	ldrb	r2, [r2, r3]
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	490f      	ldr	r1, [pc, #60]	; (8000744 <ckeakStart+0x94>)
 8000708:	5ccb      	ldrb	r3, [r1, r3]
 800070a:	429a      	cmp	r2, r3
 800070c:	d108      	bne.n	8000720 <ckeakStart+0x70>
				break;
			count++;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	3301      	adds	r3, #1
 8000712:	71fb      	strb	r3, [r7, #7]
		while(Erase[count]!='\0')
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ckeakStart+0x94>)
 8000718:	5cd3      	ldrb	r3, [r2, r3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1ef      	bne.n	80006fe <ckeakStart+0x4e>
 800071e:	e000      	b.n	8000722 <ckeakStart+0x72>
				break;
 8000720:	bf00      	nop
		}
		if(count == 16)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b10      	cmp	r3, #16
 8000726:	d101      	bne.n	800072c <ckeakStart+0x7c>
			return 2;
 8000728:	2302      	movs	r3, #2
 800072a:	e000      	b.n	800072e <ckeakStart+0x7e>
	}
	return 0;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000054 	.word	0x20000054
 800073c:	20000114 	.word	0x20000114
 8000740:	20000000 	.word	0x20000000
 8000744:	20000010 	.word	0x20000010

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f000 f9cb 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f81d 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f7ff ff7d 	bl	8000654 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800075a:	f000 f8c5 	bl	80008e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800075e:	f000 f8ed 	bl	800093c <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000762:	f7ff ff45 	bl	80005f0 <MX_CRC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t d=ckeakStart();
 8000766:	f7ff ffa3 	bl	80006b0 <ckeakStart>
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	  if( d== 1)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d102      	bne.n	800077a <main+0x32>
	  {
		  BL_FeatchHostCommand();
 8000774:	f7ff fcea 	bl	800014c <BL_FeatchHostCommand>
 8000778:	e7f5      	b.n	8000766 <main+0x1e>
	  }
	  else if(d == 2)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d104      	bne.n	800078a <main+0x42>
	  {
		  Perform_Flash_Erase(0xff,60);
 8000780:	213c      	movs	r1, #60	; 0x3c
 8000782:	20ff      	movs	r0, #255	; 0xff
 8000784:	f7ff fe96 	bl	80004b4 <Perform_Flash_Erase>
 8000788:	e7ed      	b.n	8000766 <main+0x1e>
	  }
	  else
	  {
		  Bootloader_Jump_To_Application();
 800078a:	f7ff fdd3 	bl	8000334 <Bootloader_Jump_To_Application>
  {
 800078e:	e7ea      	b.n	8000766 <main+0x1e>

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b090      	sub	sp, #64	; 0x40
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	2228      	movs	r2, #40	; 0x28
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fdbc 	bl	800231c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 ff05 	bl	80015e8 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007e4:	f000 f819 	bl	800081a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f970 	bl	8001ae8 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800080e:	f000 f804 	bl	800081a <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3740      	adds	r7, #64	; 0x40
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800081e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x6>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_MspInit+0x5c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <HAL_MspInit+0x5c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x5c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x5c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_MspInit+0x60>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_MspInit+0x60>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000
 8000884:	40010000 	.word	0x40010000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <HardFault_Handler+0x4>

0800089a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <MemManage_Handler+0x4>

080008a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <BusFault_Handler+0x4>

080008a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <UsageFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f94e 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_USART2_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USART2_UART_Init+0x4c>)
 8000920:	f001 fa7e 	bl	8001e20 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f7ff ff76 	bl	800081a <Error_Handler>
  }

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000114 	.word	0x20000114
 8000938:	40004400 	.word	0x40004400

0800093c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART3_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART3_UART_Init+0x4c>)
 8000974:	f001 fa54 	bl	8001e20 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f7ff ff4c 	bl	800081a <Error_Handler>
  }

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000d0 	.word	0x200000d0
 800098c:	40004800 	.word	0x40004800

08000990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a37      	ldr	r2, [pc, #220]	; (8000a88 <HAL_UART_MspInit+0xf8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d130      	bne.n	8000a12 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	4a35      	ldr	r2, [pc, #212]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ba:	61d3      	str	r3, [r2, #28]
 80009bc:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a2f      	ldr	r2, [pc, #188]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009e0:	2304      	movs	r3, #4
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	4619      	mov	r1, r3
 80009f2:	4827      	ldr	r0, [pc, #156]	; (8000a90 <HAL_UART_MspInit+0x100>)
 80009f4:	f000 fc04 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009f8:	2308      	movs	r3, #8
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0318 	add.w	r3, r7, #24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4821      	ldr	r0, [pc, #132]	; (8000a90 <HAL_UART_MspInit+0x100>)
 8000a0c:	f000 fbf8 	bl	8001200 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a10:	e036      	b.n	8000a80 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1f      	ldr	r2, [pc, #124]	; (8000a94 <HAL_UART_MspInit+0x104>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d131      	bne.n	8000a80 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	4a1a      	ldr	r2, [pc, #104]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a26:	61d3      	str	r3, [r2, #28]
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 0318 	add.w	r3, r7, #24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <HAL_UART_MspInit+0x108>)
 8000a62:	f000 fbcd 	bl	8001200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <HAL_UART_MspInit+0x108>)
 8000a7c:	f000 fbc0 	bl	8001200 <HAL_GPIO_Init>
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010800 	.word	0x40010800
 8000a94:	40004800 	.word	0x40004800
 8000a98:	40010c00 	.word	0x40010c00

08000a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	; (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ac2:	f7ff ff0b 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f001 fc05 	bl	80022d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aca:	f7ff fe3d 	bl	8000748 <main>
  bx lr
 8000ace:	4770      	bx	lr
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000ad8:	08002378 	.word	0x08002378
  ldr r2, =_sbss
 8000adc:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000ae0:	20000180 	.word	0x20000180

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x28>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f907 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fe8e 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f911 	bl	8000d5a <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f8e7 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000020 	.word	0x20000020
 8000b6c:	20000028 	.word	0x20000028
 8000b70:	20000024 	.word	0x20000024

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x20>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_IncTick+0x20>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	20000028 	.word	0x20000028
 8000b94:	20000158 	.word	0x20000158

08000b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <HAL_GetTick+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000158 	.word	0x20000158

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff90 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff49 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff5e 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff90 	bl	8000c64 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5f 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffb0 	bl	8000cc8 <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e00e      	b.n	8000da2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	795b      	ldrb	r3, [r3, #5]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d105      	bne.n	8000d9a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fc3f 	bl	8000618 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b087      	sub	sp, #28
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	441a      	add	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6812      	ldr	r2, [r2, #0]
 8000dd4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d3f0      	bcc.n	8000dc6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2201      	movs	r2, #1
 8000df0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000df2:	693b      	ldr	r3, [r7, #16]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	371c      	adds	r7, #28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
	...

08000e00 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <HAL_FLASH_Program+0xd8>)
 8000e1c:	7e1b      	ldrb	r3, [r3, #24]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d101      	bne.n	8000e26 <HAL_FLASH_Program+0x26>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e054      	b.n	8000ed0 <HAL_FLASH_Program+0xd0>
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <HAL_FLASH_Program+0xd8>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e30:	f000 f8a8 	bl	8000f84 <FLASH_WaitForLastOperation>
 8000e34:	4603      	mov	r3, r0
 8000e36:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d144      	bne.n	8000ec8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d102      	bne.n	8000e4a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000e44:	2301      	movs	r3, #1
 8000e46:	757b      	strb	r3, [r7, #21]
 8000e48:	e007      	b.n	8000e5a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d102      	bne.n	8000e56 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000e50:	2302      	movs	r3, #2
 8000e52:	757b      	strb	r3, [r7, #21]
 8000e54:	e001      	b.n	8000e5a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000e56:	2304      	movs	r3, #4
 8000e58:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75bb      	strb	r3, [r7, #22]
 8000e5e:	e02d      	b.n	8000ebc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e60:	7dbb      	ldrb	r3, [r7, #22]
 8000e62:	005a      	lsls	r2, r3, #1
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	eb02 0c03 	add.w	ip, r2, r3
 8000e6a:	7dbb      	ldrb	r3, [r7, #22]
 8000e6c:	0119      	lsls	r1, r3, #4
 8000e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e72:	f1c1 0620 	rsb	r6, r1, #32
 8000e76:	f1a1 0020 	sub.w	r0, r1, #32
 8000e7a:	fa22 f401 	lsr.w	r4, r2, r1
 8000e7e:	fa03 f606 	lsl.w	r6, r3, r6
 8000e82:	4334      	orrs	r4, r6
 8000e84:	fa23 f000 	lsr.w	r0, r3, r0
 8000e88:	4304      	orrs	r4, r0
 8000e8a:	fa23 f501 	lsr.w	r5, r3, r1
 8000e8e:	b2a3      	uxth	r3, r4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4660      	mov	r0, ip
 8000e94:	f000 f85a 	bl	8000f4c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e9c:	f000 f872 	bl	8000f84 <FLASH_WaitForLastOperation>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_FLASH_Program+0xdc>)
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_FLASH_Program+0xdc>)
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d107      	bne.n	8000ec6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000eb6:	7dbb      	ldrb	r3, [r7, #22]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	75bb      	strb	r3, [r7, #22]
 8000ebc:	7dba      	ldrb	r2, [r7, #22]
 8000ebe:	7d7b      	ldrb	r3, [r7, #21]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3cd      	bcc.n	8000e60 <HAL_FLASH_Program+0x60>
 8000ec4:	e000      	b.n	8000ec8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000ec6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_FLASH_Program+0xd8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	761a      	strb	r2, [r3, #24]

  return status;
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed8:	20000160 	.word	0x20000160
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_FLASH_Unlock+0x40>)
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00d      	beq.n	8000f12 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_FLASH_Unlock+0x40>)
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_FLASH_Unlock+0x44>)
 8000efa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_FLASH_Unlock+0x40>)
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_FLASH_Unlock+0x48>)
 8000f00:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_FLASH_Unlock+0x40>)
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000
 8000f24:	45670123 	.word	0x45670123
 8000f28:	cdef89ab 	.word	0xcdef89ab

08000f2c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_FLASH_Lock+0x1c>)
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_FLASH_Lock+0x1c>)
 8000f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40022000 	.word	0x40022000

08000f4c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <FLASH_Program_HalfWord+0x30>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <FLASH_Program_HalfWord+0x34>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <FLASH_Program_HalfWord+0x34>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	887a      	ldrh	r2, [r7, #2]
 8000f6e:	801a      	strh	r2, [r3, #0]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000160 	.word	0x20000160
 8000f80:	40022000 	.word	0x40022000

08000f84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff fe04 	bl	8000b98 <HAL_GetTick>
 8000f90:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f92:	e010      	b.n	8000fb6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9a:	d00c      	beq.n	8000fb6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <FLASH_WaitForLastOperation+0x2e>
 8000fa2:	f7ff fdf9 	bl	8000b98 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d201      	bcs.n	8000fb6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e025      	b.n	8001002 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <FLASH_WaitForLastOperation+0x88>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1e8      	bne.n	8000f94 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <FLASH_WaitForLastOperation+0x88>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f003 0320 	and.w	r3, r3, #32
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <FLASH_WaitForLastOperation+0x88>)
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <FLASH_WaitForLastOperation+0x88>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 0310 	and.w	r3, r3, #16
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10b      	bne.n	8000ff8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <FLASH_WaitForLastOperation+0x88>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d105      	bne.n	8000ff8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <FLASH_WaitForLastOperation+0x88>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000ff8:	f000 f80a 	bl	8001010 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40022000 	.word	0x40022000

08001010 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <FLASH_SetErrorCode+0x98>)
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	2b00      	cmp	r3, #0
 8001024:	d009      	beq.n	800103a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <FLASH_SetErrorCode+0x9c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <FLASH_SetErrorCode+0x9c>)
 8001030:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <FLASH_SetErrorCode+0x98>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d009      	beq.n	800105a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <FLASH_SetErrorCode+0x9c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <FLASH_SetErrorCode+0x9c>)
 8001050:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <FLASH_SetErrorCode+0x98>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <FLASH_SetErrorCode+0x9c>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <FLASH_SetErrorCode+0x9c>)
 8001070:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <FLASH_SetErrorCode+0x98>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <FLASH_SetErrorCode+0x98>)
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f240 1201 	movw	r2, #257	; 0x101
 8001084:	4293      	cmp	r3, r2
 8001086:	d106      	bne.n	8001096 <FLASH_SetErrorCode+0x86>
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <FLASH_SetErrorCode+0x98>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <FLASH_SetErrorCode+0x98>)
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	61d3      	str	r3, [r2, #28]
}  
 8001094:	e002      	b.n	800109c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <FLASH_SetErrorCode+0x98>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	60d3      	str	r3, [r2, #12]
}  
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000
 80010ac:	20000160 	.word	0x20000160

080010b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_FLASHEx_Erase+0xd0>)
 80010c4:	7e1b      	ldrb	r3, [r3, #24]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_FLASHEx_Erase+0x1e>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e053      	b.n	8001176 <HAL_FLASHEx_Erase+0xc6>
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <HAL_FLASHEx_Erase+0xd0>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d116      	bne.n	800110a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010e0:	f7ff ff50 	bl	8000f84 <FLASH_WaitForLastOperation>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d141      	bne.n	800116e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 f84c 	bl	8001188 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010f4:	f7ff ff46 	bl	8000f84 <FLASH_WaitForLastOperation>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80010fc:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_FLASHEx_Erase+0xd4>)
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	4a20      	ldr	r2, [pc, #128]	; (8001184 <HAL_FLASHEx_Erase+0xd4>)
 8001102:	f023 0304 	bic.w	r3, r3, #4
 8001106:	6113      	str	r3, [r2, #16]
 8001108:	e031      	b.n	800116e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800110a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800110e:	f7ff ff39 	bl	8000f84 <FLASH_WaitForLastOperation>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d12a      	bne.n	800116e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f04f 32ff 	mov.w	r2, #4294967295
 800111e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	e019      	b.n	800115c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f000 f849 	bl	80011c0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800112e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001132:	f7ff ff27 	bl	8000f84 <FLASH_WaitForLastOperation>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_FLASHEx_Erase+0xd4>)
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <HAL_FLASHEx_Erase+0xd4>)
 8001140:	f023 0302 	bic.w	r3, r3, #2
 8001144:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	601a      	str	r2, [r3, #0]
            break;
 8001152:	e00c      	b.n	800116e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800115a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	029a      	lsls	r2, r3, #10
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3dc      	bcc.n	8001128 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_FLASHEx_Erase+0xd0>)
 8001170:	2200      	movs	r2, #0
 8001172:	761a      	strb	r2, [r3, #24]

  return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000160 	.word	0x20000160
 8001184:	40022000 	.word	0x40022000

08001188 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <FLASH_MassErase+0x30>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <FLASH_MassErase+0x34>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <FLASH_MassErase+0x34>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <FLASH_MassErase+0x34>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <FLASH_MassErase+0x34>)
 80011a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ac:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	20000160 	.word	0x20000160
 80011bc:	40022000 	.word	0x40022000

080011c0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <FLASH_PageErase+0x38>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <FLASH_PageErase+0x3c>)
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <FLASH_PageErase+0x3c>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <FLASH_PageErase+0x3c>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <FLASH_PageErase+0x3c>)
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <FLASH_PageErase+0x3c>)
 80011e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000160 	.word	0x20000160
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b08b      	sub	sp, #44	; 0x2c
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	e127      	b.n	8001464 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001214:	2201      	movs	r2, #1
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8116 	bne.w	800145e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b12      	cmp	r3, #18
 8001238:	d034      	beq.n	80012a4 <HAL_GPIO_Init+0xa4>
 800123a:	2b12      	cmp	r3, #18
 800123c:	d80d      	bhi.n	800125a <HAL_GPIO_Init+0x5a>
 800123e:	2b02      	cmp	r3, #2
 8001240:	d02b      	beq.n	800129a <HAL_GPIO_Init+0x9a>
 8001242:	2b02      	cmp	r3, #2
 8001244:	d804      	bhi.n	8001250 <HAL_GPIO_Init+0x50>
 8001246:	2b00      	cmp	r3, #0
 8001248:	d031      	beq.n	80012ae <HAL_GPIO_Init+0xae>
 800124a:	2b01      	cmp	r3, #1
 800124c:	d01c      	beq.n	8001288 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800124e:	e048      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001250:	2b03      	cmp	r3, #3
 8001252:	d043      	beq.n	80012dc <HAL_GPIO_Init+0xdc>
 8001254:	2b11      	cmp	r3, #17
 8001256:	d01b      	beq.n	8001290 <HAL_GPIO_Init+0x90>
          break;
 8001258:	e043      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800125a:	4a89      	ldr	r2, [pc, #548]	; (8001480 <HAL_GPIO_Init+0x280>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d026      	beq.n	80012ae <HAL_GPIO_Init+0xae>
 8001260:	4a87      	ldr	r2, [pc, #540]	; (8001480 <HAL_GPIO_Init+0x280>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d806      	bhi.n	8001274 <HAL_GPIO_Init+0x74>
 8001266:	4a87      	ldr	r2, [pc, #540]	; (8001484 <HAL_GPIO_Init+0x284>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d020      	beq.n	80012ae <HAL_GPIO_Init+0xae>
 800126c:	4a86      	ldr	r2, [pc, #536]	; (8001488 <HAL_GPIO_Init+0x288>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01d      	beq.n	80012ae <HAL_GPIO_Init+0xae>
          break;
 8001272:	e036      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001274:	4a85      	ldr	r2, [pc, #532]	; (800148c <HAL_GPIO_Init+0x28c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0xae>
 800127a:	4a85      	ldr	r2, [pc, #532]	; (8001490 <HAL_GPIO_Init+0x290>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d016      	beq.n	80012ae <HAL_GPIO_Init+0xae>
 8001280:	4a84      	ldr	r2, [pc, #528]	; (8001494 <HAL_GPIO_Init+0x294>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0xae>
          break;
 8001286:	e02c      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e028      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	3304      	adds	r3, #4
 8001296:	623b      	str	r3, [r7, #32]
          break;
 8001298:	e023      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	3308      	adds	r3, #8
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e01e      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	330c      	adds	r3, #12
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e019      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012b6:	2304      	movs	r3, #4
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e012      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d105      	bne.n	80012d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c4:	2308      	movs	r3, #8
 80012c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	611a      	str	r2, [r3, #16]
          break;
 80012ce:	e008      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d0:	2308      	movs	r3, #8
 80012d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	615a      	str	r2, [r3, #20]
          break;
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2bff      	cmp	r3, #255	; 0xff
 80012e6:	d801      	bhi.n	80012ec <HAL_GPIO_Init+0xec>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e001      	b.n	80012f0 <HAL_GPIO_Init+0xf0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3304      	adds	r3, #4
 80012f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2bff      	cmp	r3, #255	; 0xff
 80012f6:	d802      	bhi.n	80012fe <HAL_GPIO_Init+0xfe>
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x104>
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	3b08      	subs	r3, #8
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	210f      	movs	r1, #15
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	401a      	ands	r2, r3
 8001316:	6a39      	ldr	r1, [r7, #32]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	431a      	orrs	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8096 	beq.w	800145e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001332:	4b59      	ldr	r3, [pc, #356]	; (8001498 <HAL_GPIO_Init+0x298>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a58      	ldr	r2, [pc, #352]	; (8001498 <HAL_GPIO_Init+0x298>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_GPIO_Init+0x298>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800134a:	4a54      	ldr	r2, [pc, #336]	; (800149c <HAL_GPIO_Init+0x29c>)
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <HAL_GPIO_Init+0x2a0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x19e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <HAL_GPIO_Init+0x2a4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x19a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a49      	ldr	r2, [pc, #292]	; (80014a8 <HAL_GPIO_Init+0x2a8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x196>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a48      	ldr	r2, [pc, #288]	; (80014ac <HAL_GPIO_Init+0x2ac>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x192>
 800138e:	2303      	movs	r3, #3
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x1a0>
 8001392:	2304      	movs	r3, #4
 8001394:	e004      	b.n	80013a0 <HAL_GPIO_Init+0x1a0>
 8001396:	2302      	movs	r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x1a0>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x1a0>
 800139e:	2300      	movs	r3, #0
 80013a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a2:	f002 0203 	and.w	r2, r2, #3
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4093      	lsls	r3, r2
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013b0:	493a      	ldr	r1, [pc, #232]	; (800149c <HAL_GPIO_Init+0x29c>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4938      	ldr	r1, [pc, #224]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d8:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	43db      	mvns	r3, r3
 80013e0:	4933      	ldr	r1, [pc, #204]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	492e      	ldr	r1, [pc, #184]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	43db      	mvns	r3, r3
 8001408:	4929      	ldr	r1, [pc, #164]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 800140a:	4013      	ands	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	4924      	ldr	r1, [pc, #144]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
 8001426:	e006      	b.n	8001436 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	43db      	mvns	r3, r3
 8001430:	491f      	ldr	r1, [pc, #124]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001432:	4013      	ands	r3, r2
 8001434:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	491a      	ldr	r1, [pc, #104]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	60cb      	str	r3, [r1, #12]
 800144e:	e006      	b.n	800145e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	43db      	mvns	r3, r3
 8001458:	4915      	ldr	r1, [pc, #84]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 800145a:	4013      	ands	r3, r2
 800145c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	3301      	adds	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	fa22 f303 	lsr.w	r3, r2, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f aed0 	bne.w	8001214 <HAL_GPIO_Init+0x14>
  }
}
 8001474:	bf00      	nop
 8001476:	372c      	adds	r7, #44	; 0x2c
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	10210000 	.word	0x10210000
 8001484:	10110000 	.word	0x10110000
 8001488:	10120000 	.word	0x10120000
 800148c:	10310000 	.word	0x10310000
 8001490:	10320000 	.word	0x10320000
 8001494:	10220000 	.word	0x10220000
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	40011000 	.word	0x40011000
 80014ac:	40011400 	.word	0x40011400
 80014b0:	40010400 	.word	0x40010400

080014b4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80014ba:	f7ff fb6d 	bl	8000b98 <HAL_GetTick>
 80014be:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014c0:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fb63 	bl	8000b98 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e077      	b.n	80015d0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80014e0:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80014ec:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014f4:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80014f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80014fc:	f7ff fb4c 	bl	8000b98 <HAL_GetTick>
 8001500:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001502:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150a:	f7ff fb45 	bl	8000b98 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e057      	b.n	80015d0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_DeInit+0x128>)
 800152e:	4a2c      	ldr	r2, [pc, #176]	; (80015e0 <HAL_RCC_DeInit+0x12c>)
 8001530:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <HAL_RCC_DeInit+0x130>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff faec 	bl	8000b14 <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e044      	b.n	80015d0 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001546:	f7ff fb27 	bl	8000b98 <HAL_GetTick>
 800154a:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 8001552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001556:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fb1d 	bl	8000b98 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e031      	b.n	80015d0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800157e:	f7ff fb0b 	bl	8000b98 <HAL_GetTick>
 8001582:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 800158a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800158e:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001592:	f7ff fb01 	bl	8000b98 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b64      	cmp	r3, #100	; 0x64
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e015      	b.n	80015d0 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ba:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80015c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c6:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_RCC_DeInit+0x124>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	20000020 	.word	0x20000020
 80015e0:	007a1200 	.word	0x007a1200
 80015e4:	20000024 	.word	0x20000024

080015e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e26c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8087 	beq.w	8001716 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001608:	4b92      	ldr	r3, [pc, #584]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b04      	cmp	r3, #4
 8001612:	d00c      	beq.n	800162e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001614:	4b8f      	ldr	r3, [pc, #572]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b08      	cmp	r3, #8
 800161e:	d112      	bne.n	8001646 <HAL_RCC_OscConfig+0x5e>
 8001620:	4b8c      	ldr	r3, [pc, #560]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162c:	d10b      	bne.n	8001646 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162e:	4b89      	ldr	r3, [pc, #548]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d06c      	beq.n	8001714 <HAL_RCC_OscConfig+0x12c>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d168      	bne.n	8001714 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e246      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x76>
 8001650:	4b80      	ldr	r3, [pc, #512]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a7f      	ldr	r2, [pc, #508]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	e02e      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x98>
 8001666:	4b7b      	ldr	r3, [pc, #492]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a7a      	ldr	r2, [pc, #488]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 800166c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b78      	ldr	r3, [pc, #480]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a77      	ldr	r2, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e01d      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0xbc>
 800168a:	4b72      	ldr	r3, [pc, #456]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a71      	ldr	r2, [pc, #452]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6e      	ldr	r2, [pc, #440]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 80016a4:	4b6b      	ldr	r3, [pc, #428]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a6a      	ldr	r2, [pc, #424]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b68      	ldr	r3, [pc, #416]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a67      	ldr	r2, [pc, #412]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fa68 	bl	8000b98 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fa64 	bl	8000b98 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1fa      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0xe4>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa54 	bl	8000b98 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fa50 	bl	8000b98 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1e6      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x10c>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d063      	beq.n	80017ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001722:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800172e:	4b49      	ldr	r3, [pc, #292]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b08      	cmp	r3, #8
 8001738:	d11c      	bne.n	8001774 <HAL_RCC_OscConfig+0x18c>
 800173a:	4b46      	ldr	r3, [pc, #280]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	4b43      	ldr	r3, [pc, #268]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x176>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e1ba      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4939      	ldr	r1, [pc, #228]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	e03a      	b.n	80017ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177c:	4b36      	ldr	r3, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fa09 	bl	8000b98 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178a:	f7ff fa05 	bl	8000b98 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e19b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4927      	ldr	r1, [pc, #156]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e015      	b.n	80017ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff f9e8 	bl	8000b98 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff f9e4 	bl	8000b98 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e17a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d03a      	beq.n	800186c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d019      	beq.n	8001832 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_RCC_OscConfig+0x274>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff f9c8 	bl	8000b98 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff f9c4 	bl	8000b98 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e15a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f000 fada 	bl	8001de4 <RCC_Delay>
 8001830:	e01c      	b.n	800186c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_RCC_OscConfig+0x274>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff f9ae 	bl	8000b98 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183e:	e00f      	b.n	8001860 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff f9aa 	bl	8000b98 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d908      	bls.n	8001860 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e140      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	42420000 	.word	0x42420000
 800185c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b9e      	ldr	r3, [pc, #632]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1e9      	bne.n	8001840 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a6 	beq.w	80019c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b97      	ldr	r3, [pc, #604]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10d      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b94      	ldr	r3, [pc, #592]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a93      	ldr	r2, [pc, #588]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b91      	ldr	r3, [pc, #580]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b8e      	ldr	r3, [pc, #568]	; (8001ae0 <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4b8b      	ldr	r3, [pc, #556]	; (8001ae0 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a8a      	ldr	r2, [pc, #552]	; (8001ae0 <HAL_RCC_OscConfig+0x4f8>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7ff f96b 	bl	8000b98 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff f967 	bl	8000b98 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0fd      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b81      	ldr	r3, [pc, #516]	; (8001ae0 <HAL_RCC_OscConfig+0x4f8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x312>
 80018ec:	4b7b      	ldr	r3, [pc, #492]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4a7a      	ldr	r2, [pc, #488]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	e02d      	b.n	8001956 <HAL_RCC_OscConfig+0x36e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x334>
 8001902:	4b76      	ldr	r3, [pc, #472]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a75      	ldr	r2, [pc, #468]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	4b73      	ldr	r3, [pc, #460]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a72      	ldr	r2, [pc, #456]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	e01c      	b.n	8001956 <HAL_RCC_OscConfig+0x36e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b05      	cmp	r3, #5
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0x356>
 8001924:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a6c      	ldr	r2, [pc, #432]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4a69      	ldr	r2, [pc, #420]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	e00b      	b.n	8001956 <HAL_RCC_OscConfig+0x36e>
 800193e:	4b67      	ldr	r3, [pc, #412]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a66      	ldr	r2, [pc, #408]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4b64      	ldr	r3, [pc, #400]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a63      	ldr	r2, [pc, #396]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d015      	beq.n	800198a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff f91b 	bl	8000b98 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff f917 	bl	8000b98 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0ab      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197c:	4b57      	ldr	r3, [pc, #348]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ee      	beq.n	8001966 <HAL_RCC_OscConfig+0x37e>
 8001988:	e014      	b.n	80019b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7ff f905 	bl	8000b98 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff f901 	bl	8000b98 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e095      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a8:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ee      	bne.n	8001992 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d105      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ba:	4b48      	ldr	r3, [pc, #288]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a47      	ldr	r2, [pc, #284]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8081 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d0:	4b42      	ldr	r3, [pc, #264]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d061      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d146      	bne.n	8001a72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_OscConfig+0x4fc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff f8d5 	bl	8000b98 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff f8d1 	bl	8000b98 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e067      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a04:	4b35      	ldr	r3, [pc, #212]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a18:	d108      	bne.n	8001a2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	492d      	ldr	r1, [pc, #180]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a19      	ldr	r1, [r3, #32]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	4927      	ldr	r1, [pc, #156]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_OscConfig+0x4fc>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f8a5 	bl	8000b98 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff f8a1 	bl	8000b98 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e037      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x46a>
 8001a70:	e02f      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_RCC_OscConfig+0x4fc>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff f88e 	bl	8000b98 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f88a 	bl	8000b98 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e020      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x498>
 8001a9e:	e018      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e013      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	42420060 	.word	0x42420060

08001ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0d0      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4965      	ldr	r1, [pc, #404]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0b8      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a52      	ldr	r2, [pc, #328]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	494d      	ldr	r1, [pc, #308]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d040      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e073      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e06b      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4936      	ldr	r1, [pc, #216]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7fe ffde 	bl	8000b98 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7fe ffda 	bl	8000b98 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e053      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d210      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 0207 	bic.w	r2, r3, #7
 8001c1e:	4922      	ldr	r1, [pc, #136]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e032      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4916      	ldr	r1, [pc, #88]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c76:	f000 f821 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	5cd3      	ldrb	r3, [r2, r3]
 8001c8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe ff3c 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08002358 	.word	0x08002358
 8001cb4:	20000020 	.word	0x20000020
 8001cb8:	20000024 	.word	0x20000024

08001cbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	b490      	push	{r4, r7}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cc4:	1d3c      	adds	r4, r7, #4
 8001cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x40>
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x46>
 8001cfa:	e02d      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cfe:	623b      	str	r3, [r7, #32]
      break;
 8001d00:	e02d      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	0c9b      	lsrs	r3, r3, #18
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d0e:	4413      	add	r3, r2
 8001d10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d013      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	0c5b      	lsrs	r3, r3, #17
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d2e:	4413      	add	r3, r2
 8001d30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d3a:	fb02 f203 	mul.w	r2, r2, r3
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
 8001d46:	e004      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	623b      	str	r3, [r7, #32]
      break;
 8001d56:	e002      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d5a:	623b      	str	r3, [r7, #32]
      break;
 8001d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc90      	pop	{r4, r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	08002344 	.word	0x08002344
 8001d70:	08002354 	.word	0x08002354
 8001d74:	40021000 	.word	0x40021000
 8001d78:	007a1200 	.word	0x007a1200
 8001d7c:	003d0900 	.word	0x003d0900

08001d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	20000020 	.word	0x20000020

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d98:	f7ff fff2 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4601      	mov	r1, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08002368 	.word	0x08002368

08001dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	0adb      	lsrs	r3, r3, #11
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08002368 	.word	0x08002368

08001de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <RCC_Delay+0x34>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <RCC_Delay+0x38>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0a5b      	lsrs	r3, r3, #9
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e00:	bf00      	nop
  }
  while (Delay --);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1e5a      	subs	r2, r3, #1
 8001e06:	60fa      	str	r2, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f9      	bne.n	8001e00 <RCC_Delay+0x1c>
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000020 	.word	0x20000020
 8001e1c:	10624dd3 	.word	0x10624dd3

08001e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e03f      	b.n	8001eb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fda2 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f9a7 	bl	80021b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b08a      	sub	sp, #40	; 0x28
 8001ebe:	af02      	add	r7, sp, #8
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d17c      	bne.n	8001fd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_UART_Transmit+0x2c>
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e075      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_UART_Transmit+0x3e>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e06e      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2221      	movs	r2, #33	; 0x21
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f0e:	f7fe fe43 	bl	8000b98 <HAL_GetTick>
 8001f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	88fa      	ldrh	r2, [r7, #6]
 8001f18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f28:	d108      	bne.n	8001f3c <HAL_UART_Transmit+0x82>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d104      	bne.n	8001f3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	e003      	b.n	8001f44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f4c:	e02a      	b.n	8001fa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f8e2 	bl	8002122 <UART_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e036      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10b      	bne.n	8001f86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3302      	adds	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e007      	b.n	8001f96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3301      	adds	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1cf      	bne.n	8001f4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2140      	movs	r1, #64	; 0x40
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f8b2 	bl	8002122 <UART_WaitOnFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e006      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e000      	b.n	8001fd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b08a      	sub	sp, #40	; 0x28
 8001fe2:	af02      	add	r7, sp, #8
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	f040 808c 	bne.w	8002118 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_UART_Receive+0x2e>
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e084      	b.n	800211a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_UART_Receive+0x40>
 800201a:	2302      	movs	r3, #2
 800201c:	e07d      	b.n	800211a <HAL_UART_Receive+0x13c>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2222      	movs	r2, #34	; 0x22
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800203a:	f7fe fdad 	bl	8000b98 <HAL_GetTick>
 800203e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	88fa      	ldrh	r2, [r7, #6]
 800204a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002054:	d108      	bne.n	8002068 <HAL_UART_Receive+0x8a>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d104      	bne.n	8002068 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	e003      	b.n	8002070 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002078:	e043      	b.n	8002102 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2200      	movs	r2, #0
 8002082:	2120      	movs	r1, #32
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f84c 	bl	8002122 <UART_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e042      	b.n	800211a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10c      	bne.n	80020b4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	3302      	adds	r3, #2
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	e01f      	b.n	80020f4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020bc:	d007      	beq.n	80020ce <HAL_UART_Receive+0xf0>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10a      	bne.n	80020dc <HAL_UART_Receive+0xfe>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e008      	b.n	80020ee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1b6      	bne.n	800207a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
  }
}
 800211a:	4618      	mov	r0, r3
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002132:	e02c      	b.n	800218e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d028      	beq.n	800218e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <UART_WaitOnFlagUntilTimeout+0x30>
 8002142:	f7fe fd29 	bl	8000b98 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	429a      	cmp	r2, r3
 8002150:	d21d      	bcs.n	800218e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002160:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e00f      	b.n	80021ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4013      	ands	r3, r2
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	429a      	cmp	r2, r3
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d0c3      	beq.n	8002134 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021f2:	f023 030c 	bic.w	r3, r3, #12
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a2c      	ldr	r2, [pc, #176]	; (80022cc <UART_SetConfig+0x114>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d103      	bne.n	8002228 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002220:	f7ff fdcc 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	e002      	b.n	800222e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002228:	f7ff fdb4 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 800222c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	009a      	lsls	r2, r3, #2
 8002238:	441a      	add	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <UART_SetConfig+0x118>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	0119      	lsls	r1, r3, #4
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	009a      	lsls	r2, r3, #2
 8002258:	441a      	add	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fbb2 f2f3 	udiv	r2, r2, r3
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <UART_SetConfig+0x118>)
 8002266:	fba3 0302 	umull	r0, r3, r3, r2
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2064      	movs	r0, #100	; 0x64
 800226e:	fb00 f303 	mul.w	r3, r0, r3
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	3332      	adds	r3, #50	; 0x32
 8002278:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <UART_SetConfig+0x118>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002284:	4419      	add	r1, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009a      	lsls	r2, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fbb2 f2f3 	udiv	r2, r2, r3
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <UART_SetConfig+0x118>)
 800229e:	fba3 0302 	umull	r0, r3, r3, r2
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2064      	movs	r0, #100	; 0x64
 80022a6:	fb00 f303 	mul.w	r3, r0, r3
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	3332      	adds	r3, #50	; 0x32
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <UART_SetConfig+0x118>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	440a      	add	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40013800 	.word	0x40013800
 80022d0:	51eb851f 	.word	0x51eb851f

080022d4 <__libc_init_array>:
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	2500      	movs	r5, #0
 80022d8:	4e0c      	ldr	r6, [pc, #48]	; (800230c <__libc_init_array+0x38>)
 80022da:	4c0d      	ldr	r4, [pc, #52]	; (8002310 <__libc_init_array+0x3c>)
 80022dc:	1ba4      	subs	r4, r4, r6
 80022de:	10a4      	asrs	r4, r4, #2
 80022e0:	42a5      	cmp	r5, r4
 80022e2:	d109      	bne.n	80022f8 <__libc_init_array+0x24>
 80022e4:	f000 f822 	bl	800232c <_init>
 80022e8:	2500      	movs	r5, #0
 80022ea:	4e0a      	ldr	r6, [pc, #40]	; (8002314 <__libc_init_array+0x40>)
 80022ec:	4c0a      	ldr	r4, [pc, #40]	; (8002318 <__libc_init_array+0x44>)
 80022ee:	1ba4      	subs	r4, r4, r6
 80022f0:	10a4      	asrs	r4, r4, #2
 80022f2:	42a5      	cmp	r5, r4
 80022f4:	d105      	bne.n	8002302 <__libc_init_array+0x2e>
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022fc:	4798      	blx	r3
 80022fe:	3501      	adds	r5, #1
 8002300:	e7ee      	b.n	80022e0 <__libc_init_array+0xc>
 8002302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002306:	4798      	blx	r3
 8002308:	3501      	adds	r5, #1
 800230a:	e7f2      	b.n	80022f2 <__libc_init_array+0x1e>
 800230c:	08002370 	.word	0x08002370
 8002310:	08002370 	.word	0x08002370
 8002314:	08002370 	.word	0x08002370
 8002318:	08002374 	.word	0x08002374

0800231c <memset>:
 800231c:	4603      	mov	r3, r0
 800231e:	4402      	add	r2, r0
 8002320:	4293      	cmp	r3, r2
 8002322:	d100      	bne.n	8002326 <memset+0xa>
 8002324:	4770      	bx	lr
 8002326:	f803 1b01 	strb.w	r1, [r3], #1
 800232a:	e7f9      	b.n	8002320 <memset+0x4>

0800232c <_init>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	bf00      	nop
 8002330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002332:	bc08      	pop	{r3}
 8002334:	469e      	mov	lr, r3
 8002336:	4770      	bx	lr

08002338 <_fini>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr
